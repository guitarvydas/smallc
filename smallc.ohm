smallc {
Main = TopLevel+
TopLevel =
  | Asm
  | Include
  | Define
  | GlobalVariable
  | Function

Asm = "#asm" (~"#endasm" any)+ "#endasm"
Include = "#include" includeName
Define = "#define" id Expression
GlobalVariable = Variables
Function =
  | Type? id "(" ListOf<Formal, ","> ")" FormalDeclarations+ Compound -- withformals
  | Type? id "(" ")" Compound -- noformals

FormalDeclarations = ListOf<FormalDeclaration, ","> ";"
Formal = id
FormalDeclaration = VariableDecl
ParameterID = id

Type = kwint | kwchar

Compound = "{" Statement* "}"

Statement =
  | Compound
  | LocalVariables
  | If
  | While
  | Return
  | Break
  | Continue
  | FunctionCall
  | Assignment
  | Expression
  
LocalVariables = Variables
FunctionCall = id "(" ListOf<Actual,","> ")" ";"
If =
  | kwif "(" Expression ")" Statement kwelse Statement -- ifthenelse
  | kwif "(" Expression ")" Statement -- ifthen

While = kwwhile "(" Expression ")" Statement
Return = kwreturn Expression? ";"
Break = kwbreak ";"
Continue = kwcontinue ";"

Assignment = Lval "=" Expression ";"

Lval = Hier10

Index = "[" Expression "]"
DeclarationIndex = "[" Expression? "]"

Variables = ListOf<VariableDecl, ","> ";"
VariableDecl = Type? "*"? id DeclarationIndex? Initialization?
Initialization = "=" Expression

Expression = Hier1
Hier1 = Hier2 ("=" ~"=" Hier1)*
Hier2 = Hier3 ("|" Hier3)*
Hier3 = Hier4 ("^" Hier4)*
Hier4 = Hier5 ("&" Hier5)*
Hier5 = Hier6 (("==" | "!=") Hier6)*
Hier6 = Hier7 ( ("<=" | ">=" | (">" ~">" ~"=") | ("<" ~"<" ~"=")) Hier7)*
Hier7 = Hier8 ((">>" | "<<") Hier8)*
Hier8 = Hier9 (( ("+" ~"+") | ("-" ~"-")) Hier9)*
Hier9 = Hier10 (("*" | "/" | "%") Hier10)*

Hier10 =
  | "++" Hier10 -- preinc
  | "--" Hier10 -- predec
  | "*" Hier10  -- indir
  | "&" Hier10  -- addr
  | "+" Hier11  -- plus
  | "-" Hier11  -- minus
  | Hier11 "++" -- postinc
  | Hier11 "--" -- postdec
  | Hier11 -- basic
  
Hier11 = 
  | Primary "[" Expression "]" -- subscripted
  | Primary "(" ListOf<Actual,","> ")" -- functioncall
  | Primary -- basic

Primary =
  | "(" Expression ")" -- parenthesizedexpr
  | string -- string
  | char -- char
  | number -- number
  | id -- id

booleanop =
  | "=="
  | "!="
  | "<="
  | ">="
  
Actual = Expression

string = dq (~dq any)* dq
char = sq (~sq any)* sq
sq = "'"
dq = "\""
number = digit+

kwint = "int" ~idRest
kwchar = "char" ~idRest
kwif = "if" ~idRest
kwelse = "else" ~idRest
kwwhile = "while" ~idRest
kwbreak = "break" ~idRest
kwcontinue = "continue" ~idRest
kwreturn = "return" ~idRest
keyword = kwint | kwchar | kwif | kwelse | kwwhile | kwbreak | kwcontinue | kwreturn
id = ~keyword letter idRest*
idRest = "_" | letter | alnum

includeName =
  | string -- string
  | "<" id ("." id)* ">" -- sys
  
comment = "/*" (~"*/" any)* "*/"
space += comment
}
