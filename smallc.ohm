smallc {
Main = TopLevel+
TopLevel =
  | Asm
  | Include
  | Define
  | GlobalVariable
  | Function

Asm = "#asm" (~"#endasm" any)+ "#endasm"
Include = "#include" includeName
Define = "#define" id Expression
GlobalVariable = Variables
Function =
  | id "(" Formal+ ")" FormalDeclarations Compound -- withformals
  | id "(" ")" Compound -- noformals

FormalDeclarations = ListOf<FormalDeclaration, ","> ";"
Formal = id
FormalDeclaration = VariableDecl
ParameterID = id

Type = "int" | "char"

Compound = "{" Statement* "}"

Statement =
  | Compound
  | LocalVariables
  | FunctionCall
  | If
  | While
  | Assignment

LocalVariables = Variables
FunctionCall = id "(" Actual* ")" ";"
If =
  | "if" "(" Expression ")" Statement "else" Statement -- ifthenelse
  | "if" "(" Expression ")" Statement -- ifthen

While = "while" "(" Expression ")" Statement

Assignment = Lval "=" Expression ";"

Lval = "*"? id Index?

Index = "[" Expression "]"
DeclarationIndex = "[" number? "]"

Variables = ListOf<VariableDecl, ","> ";"
VariableDecl = Type? "*"? id DeclarationIndex? Initialization?
Initialization = "=" Expression

Expression = Hier1
Hier1 = Hier2 ("=" ~"=" Hier1)*
Hier2 = Hier3 ("|" Hier3)*
Hier3 = Hier4 ("^" Hier4)*
Hier4 = Hier5 ("&" Hier5)*
Hier5 = Hier6 (("==" | "!=") Hier6)*
Hier6 = Hier7 ( ((">" ~">") | ("<" ~"<") | "<=" | ">=") Hier7)*
Hier7 = Hier8 ((">>" | "<<") Hier8)*
Hier8 = Hier9 (( ("+" ~"+") | ("-" ~"-")) Hier9)*
Hier9 = Hier10 (("*" | "/" | "%") Hier10)*

Hier10 =
  | "++" Hier11 -- preinc
  | "--" Hier11 -- predec
  | "*" Hier11  -- indir
  | "&" Hier11  -- addr
  | Hier11 "++" -- postinc
  | Hier11 "--" -- postdec
  | Hier11 -- basic
  
Hier11 = 
  | Primary "[" Expression "]" -- subscripted
  | Primary "(" Expression ")" -- functioncall
  | Primary -- basic

Primary =
  | "(" Expression ")" -- parenthesizedexpr
  | string -- string
  | char -- char
  | number -- number
  | id -- id

booleanop =
  | "=="
  | "!="
  | "<="
  | ">="
  
Actual = Expression

string = dq (~dq any)* dq
char = sq (~sq any)* sq
sq = "'"
dq = "\""
number = digit+
FunctionCallExpression = "*"? id "(" Actual* ")" Index?
  
id = letter idRest*
idRest = "_" | letter | alnum

includeName =
  | string -- string
  | "<" id ("." id)* ">" -- sys
  
comment = "/*" (~"*/" any)* "*/"
space += comment
}
